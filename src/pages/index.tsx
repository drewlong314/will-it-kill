import Head from 'next/head'
import clientPromise from '../../lib/mongodb'
import styles from '@/styles/Home.module.css'
import { useState, useRef, useEffect } from 'react'

export async function getServerSideProps(context: any) {
    try {
        await clientPromise
        // `await clientPromise` will use the default database passed in the MONGODB_URI
        // However you can use another database (e.g. myDatabase) by replacing the `await clientPromise` with the following code:
        //
        // `const client = await clientPromise`
        // `const db = client.db("myDatabase")`
        //
        // Then you can execute queries against your database like so:
        // db.find({}) or any of the MongoDB Node Driver commands

        return {
            props: { isConnected: true },
        }
    } catch (e) {
        console.error(e)
        return {
            props: { isConnected: false },
        }
    }
}

export default function Home() {
    let testObj = {
        vid1: "/videos/vid-1-0.mp4",
        vid2: "/videos/vid-1-1.mp4",
        answer: "yes"
    }

    const testObj2 = {
        vid1: "/videos/vid-2-0.mp4",
        vid2: "/videos/vid-1-1.mp4",
        answer: "no"
    }

    const [isQuestionHidden, setIsQuestionHidden] = useState(true)
    const [isNextHidden, setIsNextHidden] = useState(true)
    const [currentVideoSet, setCurrentVideoSet] = useState(testObj)
    const [vidSrc, setVidSrc] = useState("")
    const [response, setResponse] = useState("")
    const [score, setScore] = useState(0)
    const testVid = useRef<HTMLVideoElement>(null)

    useEffect(() => {
        setVidSrc(currentVideoSet.vid1)
    }, [currentVideoSet])

    const handlePause = (): void => {
        if (testVid.current != null) {
            if (vidSrc === currentVideoSet.vid1 && testVid.current.duration === testVid.current.currentTime) setIsQuestionHidden(false)
            else if (vidSrc === currentVideoSet.vid2 && testVid.current.duration === testVid.current.currentTime) {
                if (response === currentVideoSet.answer) {
                    setIsNextHidden(false)
                    setScore(score + 1)
                }
                else if (response != currentVideoSet.answer) console.log('you lost')
            }
        }
    }

    const handleResponse = (res: string): void => {
        setVidSrc(currentVideoSet.vid2)
        setIsQuestionHidden(true)
        setResponse(res)
    }

    const handleNext = (): void => {
        setCurrentVideoSet(testObj2)
        setIsNextHidden(true)
    }

    // TODO: Grab a random video set
    // TODO: Keep Score
    // TODO: Decide if the player correctly guessed

    return (
        <>
            <Head>
                <title>Will It Kill</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div>Will It Kill?</div>
                <div>Score: {score}</div>
                <div onClick={handlePause}></div>
                <video src={vidSrc} width={'1000px'} onPause={handlePause} ref={testVid} autoPlay controls muted={true} />
                <div hidden={isQuestionHidden}>
                    <div>Will it Kill?</div>
                    <button onClick={() => handleResponse("yes")}>Yes</button>
                    <button onClick={() => handleResponse("no")}>No</button>
                </div>
                <div hidden={isNextHidden}>
                    <button onClick={handleNext}>Next</button>
                </div>
            </main>
        </>
    )
}
